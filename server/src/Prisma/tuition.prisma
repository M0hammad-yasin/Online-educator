generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" // or "postgresql" if using PostgreSQL
  url      = env("MONGO_URI")
}
// prisma/schema.prisma
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}
model Teacher {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  profilePicture  String?       // Cloudinary URL
  name            String
  email           String        @unique
  userId          String        @unique @db.ObjectId
  qualification   String?
  classRate       Int?
  classes         Class[]
  role            Role          // ADMIN, TEACHER, or STUDENT
  passwordHash    String
  isEmailVerified Boolean       @default(false)
  createdAt       DateTime      @default(now()) 
}
model Admin {
   id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String        @unique
  passwordHash    String
  profilePicture  String?       // Cloudinary URL
  isEmailVerified Boolean       @default(false)
  createdAt       DateTime      @default(now())
}

model Student {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @unique @db.ObjectId
  name            String
  email           String        @unique
  profilePicture  String?       // Cloudinary URL
  parentEmail     String?
  passwordHash    String
  role            Role          // ADMIN, TEACHER, or STUDENT
  isEmailVerified Boolean       @default(false)
  createdAt       DateTime      @default(now())   
  bookedClasses   Class[]
}

model Class {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  startTime       DateTime
  endTime         DateTime
  teacher         Teacher       @relation(fields: [teacherId], references: [id])
  teacherId       String        @db.ObjectId
  student         Student       @relation(fields: [studentId], references: [id])
  studentId       String        @db.ObjectId
  status          ClassStatus   @default(SCHEDULED)
}

enum Role {
  TEACHER
  STUDENT
  }
enum ClassStatus { 
  SCHEDULED
  COMPLETED
  CANCELLED
  }
